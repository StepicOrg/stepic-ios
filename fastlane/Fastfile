# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.23.0"

default_platform :ios

platform :ios do

  before_all do
    cocoapods
  end

  def version_string(version_number, build_number)
    "v. #{version_number} (#{build_number})"
  end

  app_identifiers = {
    "Stepic" => [
      "com.AlexKarpov.Stepic", 
      "com.AlexKarpov.Stepic.watchkitapp", 
      "com.AlexKarpov.Stepic.watchkitapp.watchkitextension",
      "com.AlexKarpov.Stepic.StickerPackExtension"
    ], 
    "Adaptive 1838" => [
      "org.stepik.ios.adaptive.1838"
    ],
    "Adaptive 1906" => [
      "org.stepik.ios.adaptive.1906"
    ],
    "Adaptive 3150" => [
      "org.stepik.ios.adaptive.3150"
    ],
    "Adaptive 3149" => [
      "org.stepik.ios.adaptive.3149"
    ],
    "Adaptive 3124" => [
      "org.stepik.ios.adaptive.3124"
    ],
    "Adaptive 3067" => [
      "org.stepik.ios.adaptive.3067"
    ]
  }

  all_schemes = [
    "Stepic",
    "Adaptive 1838",
    "Adaptive 1906",
    "Adaptive 3150",
    "Adaptive 3149",
    "Adaptive 3124",
    "Adaptive 3067"
  ]

  test_schemes = [
  	"Stepic"
  ]

  screenshots_schemes = {
    "Stepic" => "Stepic Screenshots",
    "Adaptive 1838" => "Adaptive 1838 Screenshots",
    "Adaptive 1906" => "Adaptive 1906 Screenshots",
    "Adaptive 3150" => "Adaptive 3150 Screenshots",
    "Adaptive 3149" => "Adaptive 3149 Screenshots",
    "Adaptive 3124" => "Adaptive 3124 Screenshots",
    "Adaptive 3067" => "Adaptive 3067 Screenshots"
  }

  #TEST

  lane :test do 
  	for scheme in test_schemes
  		testscheme(scheme: scheme)
  	end
  end
  
  desc "Runs all the tests for scheme"
  lane :testscheme do |options|
    scheme = options[:scheme]
    scan(scheme:scheme, slack_only_on_failure: true)
  end

  #BETA

  lane :beta do |options|
    git_change = options[:git_change]
    
    if git_change
    # Ensure that your git status is not dirty
      ensure_git_status_clean

    # Increment the build number (not the version number)
    # Providing the xcodeproj is optional
      build_number = increment_build_number(xcodeproj: "Stepic.xcodeproj")
      version_number = get_version_number
    # Commit the version bump
      commit_version_bump(xcodeproj: "Stepic.xcodeproj")

    # Add a git tag for this build. This will automatically
    # use an appropriate git tag name
      add_git_tag

    # Push the new commit and tag back to your git remote
      push_to_git_remote
    end

    for scheme in all_schemes do
      betascheme(scheme: scheme, git_change: false)
    end
  end

  desc "Submit a new Beta Build to Crashlytics"
  desc "This will also make sure the profile is up to date"
  desc "Options: scheme to identify the current scheme & git_change, which identifies if the changes need to be pushed to github"
  lane :betascheme do |options|

    scheme = options[:scheme]
    git_change = options[:git_change]
  	matchscheme(scheme: scheme)

  	# Ensure that your git status is not dirty
    if git_change
      ensure_git_status_clean

  	# Increment the build number (not the version number)
  	# Providing the xcodeproj is optional
  	  build_number = increment_build_number(xcodeproj: "Stepic.xcodeproj")
      version_number = get_version_number
  	# Commit the version bump
      commit_version_bump(xcodeproj: "Stepic.xcodeproj")

  	# Add a git tag for this build. This will automatically
  	# use an appropriate git tag name
      add_git_tag

  	# Push the new commit and tag back to your git remote
      push_to_git_remote
    end

    unlock_keychain(path: "login.keychain", password: ENV["KEYCHAIN_PASSWORD"])
    sh "security set-keychain-settings -t 3600 -l ~/Library/Keychains/login.keychain"
    gym(scheme: scheme,
      clean: true,
      output_directory: "artefacts",
      output_name: "#{scheme}.ipa",
      include_bitcode: true,
      export_method: "ad-hoc") # Build your app - more options available
    crashlytics(api_token: "d4016589326f6f7814080b7ff9017e18711a1959",
              build_secret: "7b8ab6e85a0ca84908f6cd82f195f1b24ffad778e69b5bce1105ce078d1255f8",
              notifications: true,
              groups: "all-ios-testers")
    slack(
      message: "Successfully released iOS beta #{scheme} #{version_string(get_version_number, get_build_number)}", 
      channel: "#ios-ci"
    )
    # sh "your_script.sh"
    # You can also use other beta testing services here (run `fastlane actions`)
  end

  #CERTIFICATES

  desc "Match all certificates for all schemes"
  lane :matchall do 
    for scheme in all_schemes do
      matchscheme(scheme: scheme)
    end
  end

  desc "Match all certificates for scheme"
  lane :matchscheme do |options|
  	matchdev(scheme: options[:scheme])
  	matchadhoc(scheme: options[:scheme])
  	matchrelease(scheme: options[:scheme])
  end

  lane :matchdev do |options|
    scheme = options[:scheme]
    identifiers = app_identifiers[scheme]
  	match(type: "development", force_for_new_devices: true, 
  		app_identifier: identifiers)
  end

  lane :matchadhoc do |options|
    scheme = options[:scheme]
    identifiers = app_identifiers[scheme]
    match(type: "adhoc", force_for_new_devices: true, 
      app_identifier: identifiers)
  end

  lane :matchrelease do |options|
    scheme = options[:scheme]
    identifiers = app_identifiers[scheme]
    match(type: "appstore", force_for_new_devices: true, 
      app_identifier: identifiers)
  end

  # Screenshots

  lane :customise_screenshots do |options|
    scheme = options[:scheme]
    screenshots_scheme = screenshots_schemes[scheme]

    # Make absolute path for screenshots generator
    # Current dir â€“ ./fastlane
    screenpath = Dir.pwd + "/screenshots/#{scheme}"

    customize_screenshots(path: screenpath)
  end

  lane :create_screenshots do |options|
    scheme = options[:scheme]
    screenshots_scheme = screenshots_schemes[scheme]
    screenpath = "./fastlane/screenshots/#{scheme}"

    snapshot(scheme: screenshots_scheme, output_directory: screenpath)
  end

  lane :create_screenshots_all do |options|
    customise = options[:customise]

    for scheme in all_schemes do
      create_screenshots(scheme: scheme)

      if customise
        scustomise_screenshots(scheme: scheme)
      end
    end
  end

  # dSYM files

  lane :refresh_dsyms_all do
    for scheme in all_schemes do
      refresh_dsyms(app_identifier: app_identifiers[scheme][0])
    end
  end

  desc "Download all dSYM files from App Store and upload to the Crashlytics"
  lane :refresh_dsyms do |options|
    app_identifier = options[:app_identifier]

    download_dsyms(app_identifier: app_identifier)
    upload_symbols_to_crashlytics
    clean_build_artifacts
  end

  # RELEASE

  lane :release do 
  	for scheme in all_schemes do
      releasescheme(scheme: scheme)
    end
  end

  desc "Deploy a new version to the App Store"
  lane :releasescheme do |options|

    scheme = options[:scheme]
    app_identifier = app_identifiers[scheme][0]

    # match(type: "appstore")
    # snapshot
    matchscheme(scheme: scheme)

    clear_derived_data
    unlock_keychain(path: "login.keychain", password: ENV["KEYCHAIN_PASSWORD"])
    sh "security set-keychain-settings -t 3600 -l ~/Library/Keychains/login.keychain"
    gym(scheme: "#{scheme}",
      clean: true,
      output_directory: "artefacts",
      output_name: "#{scheme}.ipa",
      include_bitcode: true,
      export_method: "app-store")        
    metapath = "./fastlane/metadata/#{scheme}"
    screenpath = "./fastlane/screenshots/#{scheme}"
    deliver(metadata_path: metapath, screenshots_path: screenpath, app_identifier: app_identifier)
    refresh_dsyms(app_identifier: app_identifier)
    slack(
      message: "Successfully released iOS RELEASE #{scheme} #{version_string(get_version_number, get_build_number)}", 
      channel: "#ios-ci"
    )                  
    # upload your app to iTunes Connect
    # frameit
  end

  #Enterprise export

  lane :sb do 
  	import_certificate(
  	  certificate_path: "cert/cert.p12",
  	  certificate_password: ENV["SB_UNI_CERT_PASSWORD"],
  	  keychain_name: "login"
	)
	import_certificate(
  	  certificate_path: "cert/stepic_push.p12",
  	  certificate_password: ENV["SB_UNI_PUSH_CERT_PASSWORD"],
  	  keychain_name: "login"
	)
	update_project_provisioning(
  	  xcodeproj: "Stepic.xcodeproj",
      profile: "cert/Step.mobileprovision", # optional if you use sigh
      target_filter: "SberbankUniversity", # matches name or type of a target
      build_configuration: "Release"
    )
  	gym(
  	  scheme: "SberbankUniversity",
  	  output_directory: "artefacts",
  	  output_name: "SberbankUniversity.ipa",
  	  include_bitcode: true,
  	  export_method: "enterprise"
  	) 
  	slack(
      message: "Successfully generated SB artefacts #{version_string(get_version_number, get_build_number)}", 
      channel: "#ios-ci"
    )  
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update for iOS."
    # )
  end

  error do |lane, exception|
    slack(
      message: exception.message,
      success: false
    )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
